Количество вариантов равно факториалу количества букв.
Для слова из трех букв существует 6 анаграмм, для слова из четырех букв — 24 анаграммы,
для слова из пяти букв — 120 анаграмм и т. д. (Предполагается, что буквы в слове не повторяются;
при повторении букв количество возможных слов будет меньше.)

Программа для построения списка анаграмм слова.
Один из возможных способов для слова из n букв:
1. Построить анаграммы для правых n–1 букв.
2. Выполнить циклический сдвиг всех n букв.
3. Повторить эти действия n раз.

При циклическом сдвиге все буквы сдвигаются на одну позицию влево — кроме крайней левой буквы,
которая перемещается в конец слова (рис. 6.6).
Если выполнить циклический сдвиг слова n раз, каждая из букв слова побывает первой.
Пока выбранная буква занимает первую позицию, для всех остальных букв строится список анаграмм
(то есть буквы переставляются во всех возможных сочетаниях).
Слово cat состоит всего из трех букв, поэтому циклический сдвиг двух последних букв просто меняет их местами.
Последовательность действий показана в табл. 6.2.

Обратите внимание на необходимость возврата к исходному расположению двух букв перед выполнением
циклического сдвига всех трех букв. По этой причине в серии генерируются последовательности вида cat, cta, cat.
Лишние анаграммы не отображаются.

Как строится список анаграмм правых n – 1 букв? Посредством рекурсивного вызова.
Рекурсивный метод doAnagram() получает единственный параметр с размером слова, для которого строятся анаграммы.
Предполагается, что это слово содержит правые n букв исходного слова.
Каждый раз, когда метод doAnagram() рекурсивно вызывает себя, он делает это для уменьшенного
на единицу количества букв (рис. 6.7).

Базовое ограничение встречается тогда, когда размер слова, для которого строятся анаграммы,
составляет всего одну букву.
Сгенерировать для него новые перестановки нельзя, поэтому метод немедленно возвращает управление.
В противном случае он строит анаграммы всех букв, кроме первой буквы переданного слова, и выполняет
циклический сдвиг всего слова. Эти два действия выполняются n раз, где n — длина слова.

Код рекурсивного метода doAnagram():
public static void doAnagram(int newSize) {
    if (newSize == 1) { // Если слово слишком маленькое,
        return; // не продолжать.
    }
    for (int j = 0; j < newSize; j++) { // Для каждой позиции
        doAnagram(newSize - 1); // Построить анаграммы остальных букв
        if (newSize == 2) { // Если внутреннее состояние
            displayWord(); // Вывести слово
        }
        rotate(newSize); // Циклический сдвиг всего слова
    }
}

Каждый раз, когда метод doAnagram() вызывает себя, размер слова уменьшается
на одну букву, а начальная позиция сдвигается на одну ячейку вправо (рис. 6.8).
Метод main() запрашивает слово у пользователя, сохраняет его в символьном массиве для удобства работы,
после чего вызывает doAnagram().

Метод rotate() осуществляет циклический сдвиг на одну позицию влево так, как было описано ранее.
Метод displayWord() выводит все слово и добавляет счетчик, чтобы пользователю стало понятно,
сколько слов было выведено. Пример работы программы:
Enter a word: cats
1 cats 2 cast 3 ctsa 4 ctas 5 csat 6 csta
7 atsc 8 atcs 9 asct 10 astc 11 acts 12 acst
13 tsca 14 tsac 15 tcas 16 tcsa 17 tasc 18 tacs
19 scat 20 scta 21 satc 22 sact 23 stca 24 stac
