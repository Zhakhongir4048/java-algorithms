private void recMergeSort(long[] workSpace, int lowerBound, int upperBound) {
    if (lowerBound == upperBound) { // Если только один элемент,
        return; // сортировка не требуется.
    } else {
        int mid = (lowerBound + upperBound) / 2; // Поиск середины
        recMergeSort(workSpace, lowerBound, mid); // Сортировка нижней половины
        recMergeSort(workSpace, mid + 1, upperBound); // Сортировка верхней половины
        merge(workSpace, lowerBound, mid + 1, upperBound); // Слияние
    }
}

Как видите, кроме проверки базового ограничения, этот метод содержит всего четыре команды.
Одна команда вычисляет среднюю точку диапазона, затем следуют два рекурсивных вызова recMergeSort()
(по одному для каждой половины массива) и, наконец, вызов merge() объединяет две отсортированные половины.
Базовое ограничение заключается в том, что диапазон состоит из единственного элемента (lowerBound==upperBound);
в этом случае происходит немедленный возврат.

В аргументах метода merge() передается:
1) начальная точка подмассива нижней половины,
2) начальная точка подмассива верхней половины,
3) верхняя граница подмассива верхней половины.
На основании этой информации метод вычисляет размеры подмассивов.
