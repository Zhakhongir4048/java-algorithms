Дополнительные команды вывода помогут следить за аргументами и возвращаемыми значениями:
public static int triangle(int n) {
    System.out.println("Entering: n=" + n);
    if(n==1) {
       System.out.println("Returning 1");
        return 1;
    }
    else {
       int temp = n + triangle(n-1);
       System.out.println("Returning " + temp);
       return temp;
    }
}

Вот как выглядит результат выполнения программы для новой версии метода
triangle(), когда пользователь вводит число 5:
Enter a number: 5
Entering: n=5
Entering: n=4
Entering: n=3
Entering: n=2
Entering: n=1
Returning 1
Returning 3
Returning 6
Returning 10
Returning 15
Triangle = 15

Каждый раз, когда метод triangle() вызывает сам себя, его аргумент, изначально равный 5, уменьшается на 1.
Рекурсивные вызовы продолжаются до тех пор, пока аргумент не уменьшится до 1, после чего метод возвращает
значение. Это приводит к целой серии каскадных возвращений. Метод, словно феникс из пепла,
восстает из отработанных версий самого себя. При каждом возвращении значение n, с которым метод был вызван,
прибавляется к возвращаемому значению вызванного метода.
Возвращаемые значения воспроизводят ряд треугольных чисел до тех пор, пока ответ не вернется в метод main().
На рис. 6.4 показано, как каждый рекурсивный вызов triangle() осуществляется «изнутри» предыдущего вызова.
Непосредственно перед тем, как внутренняя версия возвращает 1, в программе одновременно
существуют пять вызовов triangle().
Внешний вызов получает аргумент 5, а внутренний — аргумент 1.
