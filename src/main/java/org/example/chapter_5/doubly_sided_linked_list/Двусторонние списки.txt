Двусторонний список похож на обычный связанный список с одной дополнительной возможностью:
в нем хранится ссылка не только на первый, но и на последний элемент.

Наличие ссылки на последний элемент позволяет вставлять новые элементы
не только в начале, но и в конце списка. Конечно, новый элемент можно вставить
в конце и обычного односвязного списка, перебирая все его содержимое до последнего элемента,
но такое решение неэффективно.

Наличие ссылки на последний элемент позволяет вставлять новые элементы
не только в начале, но и в конце списка. Конечно, новый элемент можно вставить
в конце и обычного односвязного списка, перебирая все его содержимое до последнего элемента,
но такое решение неэффективно.

Благодаря возможности быстрого обращения к последнему элементу (вместе с первым) двусторонний список
хорошо подходит для некоторых ситуаций, в которых односторонний список недостаточно эффективен.
Например, двусторонний список может использоваться для реализации очереди.

(Кстати говоря, не путайте двусторонний список с двусвязным списком,
который также будет рассмотрен позднее в этой главе.)

Обратите внимание: повторная вставка в начало списка изменяет порядок элементов,
тогда как при повторной вставке в конец списка этот порядок сохраняется.
Класс двустороннего списка называется FirstLastList.
Как упоминалось ранее, два поля данных, first и last, содержат ссылки соответственно
на первый и последний элементы списка.
Если список содержит всего один элемент, то на него ссылаются оба поля,
а при отсутствии элементов оба поля содержат null.
Класс содержит новый метод insertLast() для вставки нового элемента в конец
списка. В процессе вставки метод сохраняет ссылку на новый элемент в last.next и в last.
Методы вставки и удаления аналогичны методами одностороннего списка.
Впрочем, обоим методам вставки приходится проверять особый случай, когда список пуст до выполнения вставки.
Иначе говоря, если вызов isEmpty() возвращает true, то метод insertFirst()
должен присвоить last ссылку на новый элемент, а метод insertLast() должен присвоить эту ссылку first.
При вставке в начало списка методом insertFirst() в поле first заносится
ссылка на новый элемент; при вставке в конце списка методом insertLast() ссылка на новый элемент
заносится в поле last.
При удалении в начале списка также существует особый случай с удалением последнего элемента в списке
(в поле last в этом случае необходимо записать null).
К сожалению, переход от обычного списка к двустороннему не упрощает удаление последнего элемента —
ведь в вашем распоряжении нет ссылки на предпоследний элемент, в поле next которого необходимо записать null.
Для простого удаления последнего элемента необходимы двусвязные списки, которые мы вскоре рассмотрим.
(Конечно, для получения предпоследнего элемента также можно перебрать весь список, но это неэффективно.)
