Чтобы вставить элемент в отсортированный список, алгоритм сначала перебирает
элементы в поисках подходящей позиции для вставки (то есть позиции перед первым элементом, большим вставляемого)
Обнаружив позицию для вставки, алгоритм вставляет элемент обычным способом:
в поле next нового элемента заносится ссылка на следующий элемент, а в поле
next предыдущего элемента заносится ссылка на новый элемент.
Однако при этом приходится учитывать особые случаи: вставку нового элемента в начале или в конце списка.
Код метода вставки:
public void insert(long key) // Вставка в порядке сортировки
{
    Link newLink = new Link(key); // Создание нового элемента
    Link previous = null; // От начала списка
    Link current = first;
    // До конца списка
    while(current != null && key > current.dData) { или если key > current,
        previous = current;
        current = current.next; // Перейти к следующему элементу
    }
    if(previous==null) // В начале списка
        first = newLink; // first --> newLink
    else // Не в начале
        previous.next = newLink; // старое значение prev --> newLink
    newLink.next = current; // newLink --> старое значение current
}

При перемещении сохраняется ссылка на предыдущий элемент, чтобы в поле
next предыдущего элемента можно было записать ссылку на новый элемент.
После создания нового элемента метод готовится к поиску: для этого current, как обычно,
инициализируется значением first.
Переменной previous также присваивается null;
эта операция важна, потому что позднее по этому значению метод будет проверять,
находится ли текущая позиция в начале списка

Цикл while не отличается от тех, которые использовались ранее для поиска
позиции вставки, но в нем появилось новое условие. Цикл прерывается в том случае,
если ключ текущего элемента (current.dData) не меньше ключа вставляемого элемента (key);
это самый типичный случай, когда элемент вставляется где-то в середине списка.

Однако цикл while также прерывается и в том случае, если переменная current
содержит null. Это происходит в конце списка (поле next последнего элемента равно null),
а также в том случае, если список изначально пуст (first содержит null).
Таким образом, при завершении цикла while текущая позиция может находиться
в начале, в середине или в конце списка; кроме того, список может быть пустым

Если текущая позиция находится в начале или список пуст, переменная previous
будет равна null; соответственно в поле first заносится ссылка на новый элемент.
В противном случае текущая позиция находится в середине или в конце списка,
и в поле previous.next заносится ссылка на новый элемент

В любом случае полю next нового элемента присваивается current. Если текущая
позиция находится в конце списка, то поле current равно null, так что полю next
нового элемента будет правильно присвоено именно это значение.
