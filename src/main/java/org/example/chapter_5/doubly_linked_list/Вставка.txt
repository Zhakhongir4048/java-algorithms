Класс DoublyLinkedList содержит несколько методов вставки.
Метод insertFirst() вставляет новый элемент в начале списка, метод insertLast() — в конце,
а метод insertAfter() — после элемента с заданным ключом.

Убедившись в том, что список не пуст, метод insertFirst() записывает ссылку на
новый элемент в поле previous «старого» первого элемента, а ссылку на «старый»
первый элемент — в поле next нового элемента. Наконец, в поле first заносится
ссылка на новый элемент.

Если список пуст, то вместо поля first.previous необходимо изменить поле last.
Вот как это делается:

if( isEmpty() ) // Если список не содержит элементов,
 last = newLink; // newLink <-- last
else
 first.previous = newLink; // newLink <-- старое значение first
newLink.next = first; // newLink --> старое значение first
first = newLink; // first --> newLink

Метод insertLast() выполняет те же действия в конце списка; он является своего
рода «зеркальным отражением» insertFirst().

Метод insertAfter() вставляет новый элемент после элемента с заданным ключом.
Операция несколько усложняется, потому что в этой ситуации необходимо изменить четыре ссылки.
Прежде всего следует найти элемент с заданным ключом;
Затем, если позиция вставки находится не в конце списка, необходимо
создать две связи между новым и следующим элементом, и еще две — между current и новым элементом
Если новый элемент должен вставляться в конце списка, то его поле next должно содержать null,
а поле last — ссылку на новый элемент. Фрагмент insertAfter(), в котором настраиваются ссылки, выглядит так:

    if (current == last) { // Для последнего элемента списка
        newLink.next = null; // newLink --> null
        last = newLink; // newLink <-- last
    }
    else {
        newLink.next = current.next; // newLink --> старое значение next
        current.next.previous = newLink; // newLink --> старое значение next
    }
    newLink.previous = current; // newLink --> старое значение next
    current.next = newLink; // старое значение current --> newLink

Возможно, вам еще не встречались выражения с двумя операторами «точка»?
Это естественное расширение стандартного оператора «точка». Выражение
current.next.previous
обозначает поле previous элемента, на который ссылается поле next элемента current.
