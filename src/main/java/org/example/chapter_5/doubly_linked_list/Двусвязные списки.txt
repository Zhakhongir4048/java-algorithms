Потенциальным недостатком обычных связанных списков является сложность перемещения по списку в
обратном направлении.
Перемещение к предыдущей строке должно осуществляться за один шаг.
Двусвязный список предоставляет такую возможность.
Он позволяет перемещаться по списку как в прямом, так и в обратном направлении.
Дело в том, что каждый элемент хранит ссылки на два других элемента вместо одного.
Первая ссылка указывает на следующий элемент, как и в обычных списках.
Вторая ссылка указывает на предыдущий элемент.

Начало определения класса Link, представляющего элемент двусвязного списка,
выглядит примерно так:
class Link {
 public long dData; // Данные
 public Link next; // Ссылка на следующий элемент списка
 public link previous; // Ссылка на предыдущий элемент списка
...
}

К недостаткам двусвязных списков следует отнести то, что при каждой вставке
или удалении ссылки вам приходится изменять четыре ссылки вместо двух: две
связи с предыдущим элементом и две связи со следующим элементом. И конечно,
каждый элемент списка занимает чуть больше места из-за дополнительной ссылки.

Двусвязный список не обязан быть двусторонним (то есть ссылка на последний элемент не обязана храниться
в объекте списка), но такая реализация удобна, поэтому мы включим ее в наш пример.
