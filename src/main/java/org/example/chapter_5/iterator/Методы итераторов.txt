Дополнительные методы наделяют класс итератора гибкостью и мощью.
Все операции, связанные с перебором элементов списка (такие, как insertAfter()),
которые ранее выполнялись классом списка, более естественно выполняются итератором.
В нашем примере итератор включает следующие методы:
reset() — перемещение итератора в начало списка.
nextLink() — перемещение итератора к следующему элементу.
getCurrent() — получение элемента, на который указывает итератор.
atEnd() — true, если итератор находится в конце списка.
insertAfter() — вставка нового элемента после итератора.
insertBefore() — вставка нового элемента перед итератором.
deleteCurrent() — удаление элемента в текущей позиции итератора.

Метод insertBefore() лучше всего работает в итераторе,
а метод insertFirst(), который всегда выполняет вставку в начале списка, уместнее разместить в классе списка.
Мы оставили метод displayList() в списке, но эта операция может выполняться с использованием
методов итератора getCurrent() и nextLink().
