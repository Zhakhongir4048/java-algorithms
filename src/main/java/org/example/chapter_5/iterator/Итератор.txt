Объекты, содержащие ссылки на элементы структур данных и используемые для перебора элементов
этих структур, обычно называются итераторами.
Определение класса итератора выглядит примерно так:
class ListIterator() {
 private Link current;
 ...
}
Поле current содержит ссылку на элемент, на который в настоящее время указывает итератор.
Чтобы использовать итератор, пользователь сначала создает список, а затем объект-итератор,
ассоциированный с этим списком.
На самом деле проще поручить создание итератора списку, потому что он может передать итератору полезную
информацию — скажем, ссылку на first. По этой причине в класс списка включается метод getIterator(),
который возвращает пользователю объект-итератор для данного списка. Сокращенный фрагмент кода main(),
демонстрирующий основные принципы работы с итератором:
public static void main(...) {
    LinkList theList = new LinkList(); // Создание списка
    ListIterator iter1 = theList.getIterator(); // Создание итератора
    Link aLink = iter1.getCurrent(); // Обращение к элементу через итератор
    iter1.nextLink(); // Перемещение итератора к следующему элементу
}
Созданный объект-итератор используется для обращения к элементу, на который он указывает,
или увеличивается для перехода к следующему элементу (две последние команды).
Использованное в этом фрагменте имя объекта-итератора iter1 подчеркивает,
что аналогичным образом можно создать и другие итераторы (iter2 и т. д.).
Итератор всегда указывает на некоторый элемент списка. Он связан со списком,
но не относится ни к классу списка, ни к классу элемента списка.
Два итератора, указывающих на разные элементы списка.
