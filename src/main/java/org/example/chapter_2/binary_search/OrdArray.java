package org.example.chapter_2.binary_search;

public class OrdArray {

    private long[] a; // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤ a
    private int nElems; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö

    public OrdArray(int max) { // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        a = new long[max]; // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
        nElems = 0;
    }

    public int size() {
        return nElems;
    }

    public int find(long searchKey) {
        int lowerBound = 0;
        int upperBound = nElems - 1;
        int curIn;

        while (true) {
            curIn = (lowerBound + upperBound) / 2;
            if (a[curIn] == searchKey) {
                return curIn; // –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            } else if (lowerBound > upperBound) {
                return -1; // –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            } else { // –î–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if (a[curIn] < searchKey) {
                    lowerBound = curIn + 1;  // –í –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ
                } else {
                    upperBound = curIn - 1; // –í –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ–≤–∏–Ω–µ
                }
            }
        }
    }

    /**
     * üîç –¶–µ–ª—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞:
     * –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–µ searchKey, –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
     * –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å nElems, —Ç–æ –µ—Å—Ç—å –≤—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü.
     * üìå –†–∞–∑–±–æ—Ä –ø–æ —à–∞–≥–∞–º:
     * int low = 0;
     * int high = nElems - 1;
     * –¢—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [low, high], –æ—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–≥–æ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.
     * <p>
     * –í–∞–∂–Ω–æ: —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ low < high, —Ç.–µ. –ø–æ–∏—Å–∫ —Å—É–∂–∞–µ—Ç –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É,
     * –ø–æ–∫–∞ –æ–Ω–∞ –Ω–µ —É–ø—Ä—ë—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏.
     * <p>
     * –ï—Å–ª–∏ a[mid] <= searchKey, –∑–Ω–∞—á–∏—Ç searchKey —Ç–æ—á–Ω–æ –Ω–µ —Ä–∞–Ω—å—à–µ mid, –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–ø—Ä–∞–≤–∞ ‚áí low = mid + 1
     * –ï—Å–ª–∏ a[mid] > searchKey, —Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤—Å—Ç–∞–≤–∫–∏ ‚áí high = mid
     * üëâ –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–∏–∞–ø–∞–∑–æ–Ω —Å—É–∂–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É, –≥–¥–µ a[i] > searchKey
     * –ö–æ–≥–¥–∞ low == high, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –∏ low —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –Ω—É–∂–Ω—É—é –ø–æ–∑–∏—Ü–∏—é.
     * <p>
     * üî¢ –ü—Ä–∏–º–µ—Ä—ã:
     * –ü—Ä–∏–º–µ—Ä 1:
     * –ú–∞—Å—Å–∏–≤: [10, 20, 30, 40]
     * searchKey = 25
     * <p>
     * mid = 1 ‚Üí a[mid] = 20 <= 25 ‚Üí low = 2
     * mid = 2 ‚Üí a[mid] = 30 > 25 ‚Üí high = 2
     * –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω ‚Üí low = 2 ‚Üí –í—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä–µ–¥ 30
     */
    public int findInsertIndex(long searchKey) {
        int low = 0;
        int high = nElems - 1;

        while (low < high) {
            int mid = (low + high) / 2;
            if (a[mid] <= searchKey) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low; // –ø–æ–∑–∏—Ü–∏—è, –∫—É–¥–∞ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å
    }

    /**
     * –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å, –∫—É–¥–∞ –≤—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç.
     * –¢–æ –µ—Å—Ç—å, –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ.
     * –ó–∞—Ç–µ–º –º—ã –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫—É, –∏–¥—ë–º –≤–ø—Ä–∞–≤–æ, –∑–∞–±–∏—Ä–∞—è —Å–ª–µ–≤–∞ —ç–ª–µ–º–µ–Ω—Ç—ã. –î–µ–ª–∞–µ–º –¥—ã—Ä—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
     */
    public void insert(long value) { // –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤
        int insertIndex = findInsertIndex(value); // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤—Å—Ç–∞–≤–∫–∏

        for (int k = nElems; k > insertIndex; k--) { // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            a[k] = a[k - 1];
        }

        a[insertIndex] = value; // –í—Å—Ç–∞–≤–∫–∞
        nElems++; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    }

    public boolean delete(long value) {
        int deleteIndex = find(value); // –î–≤–æ–∏—á–Ω—ã–π –ø–æ–∏—Å–∫
        if (deleteIndex == -1) // –ù–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
            return false;
        else { // –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            for (int k = deleteIndex; k < nElems; k++) { // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                a[k] = a[k + 1];
            }
            nElems--; // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        }
        return true;
    }

    public void display() { // –í—ã–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        for (int j = 0; j < nElems; j++) { // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            System.out.print(a[j] + " "); // –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        }
        System.out.println();
    }

}
