Основной код метода bubbleSort() состоит всего из четырех строк:
public void bubbleSort() {
    int out, in;
      for(out=nElems-1; out>1; out--) // Внешний цикл (обратный)
        for(in=0; in<out; in++) // Внутренний цикл (прямой)
            if( a[in] > a[in+1] ) // Порядок нарушен?
                swap(in, in+1); // Поменять местами
}

В результате сортировки наименьший элемент должен находиться в начале массива (индекс 0),
а наибольший — в конце (индекс nElems-1). Счетчик цикла out внешнего цикла for начинает перебор с
конца массива (в позиции nElems-1) и последовательно уменьшается в процессе перебора.
Элементы с индексами, большими out, находятся на своих окончательных местах. Переменная out смещается влево после
каждого прохода, чтобы алгоритм не затрагивал уже отсортированные элементы.
Счетчик in начинается с начала массива и последовательно увеличивается при
каждой итерации внутреннего цикла вплоть до out. Внутренний цикл сравнивает
две ячейки, на которые указывают in и in+1, и если элемент в ячейке in больше
элемента в ячейке in+1 — меняет их местами

Для наглядности перестановка элементов выполняется отдельным методом
swap(). Метод просто меняет местами значения в двух ячейках массива; значение
первой ячейки сохраняется во временной переменной, на его место записывается
значение из второй ячейки, после чего содержимое временной переменной копируется во вторую ячейку.
Вообще говоря, использовать отдельный метод swap()
в реальной программе нежелательно, потому что вызов функции сопряжен с дополнительными,
пусть и небольшими затратами времени. Если вы пишете собственную реализацию сортировки, 
лучше выполните перестановку «на месте».