Существует много способов решения этой проблемы.
Наш подход базируется на классах Node и Tree из программы tree.java в листинге 8.1 (хотя методы,
относящиеся к деревьям поиска — find(), insert() и delete(), — перестают быть актуальными).

Алгоритм построения дерева выглядит так:
1. Создать объект Node (см. программу tree.java) для каждого символа, используемого в сообщении.
В сообщении из нашего примера будет 9 узлов.
Каждый узел состоит из двух элементов данных: символа и частоты этого символа в сообщении.
Информация для сообщения «SUSIE SAYS IT IS EASY» приведена в табл. 8.4.
2. Создать объект дерева для каждого из этих узлов. Узел становится корнем дерева.
3. Вставить эти деревья в приоритетную очередь (см. главу 4). Деревья упорядочиваются по частоте,
при этом наименьшая частота обладает наибольшим приоритетом. Таким образом, при извлечении
всегда выбирается дерево с наименее часто используемым символом.

Далее происходит следующее:
1. Извлечь два дерева из приоритетной очереди и сделать их потомками нового узла.
Частота нового узла является суммой частот потомков; поле символа может остаться пустым.
2. Вставить новое дерево из трех узлов обратно в приоритетную очередь.
3. Продолжить выполнение шагов 1 и 2. Деревья постепенно увеличиваются, а их количество постепенно сокращается.
Когда в очереди останется только одно дерево, оно представляет собой дерево Хаффмана.
Работа алгоритма на этом завершается.

На рис. 8.24 и 8.25 показано, как строится дерево Хаффмана для сообщения «SUSIE SAYS IT IS EASY»
