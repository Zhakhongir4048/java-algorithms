Начало метода delete() почти не отличается от методов find() и insert().
Удаляемый узел необходимо прежде всего найти.
Как и в случае с insert(), необходимо запомнить родителя удаляемого узла для изменения полей его потомков.
Если узел будет найден, цикл while прерывается; при этом parent содержит удаляемый узел.
Если поиск оказался неудачным, delete() просто возвращает значение false.

public boolean delete(int key) { // Удаление узла с заданным ключом (предполагается, что дерево не пусто)

    Node current = root;
    Node parent = root;
    boolean isLeftChild = true;

    while (current.iData != key) { // Поиск узла
        parent = current;
        if (key < current.iData) { // Двигаться налево?
            isLeftChild = true;
            current = current.leftChild;
        } else { // Или направо?
            isLeftChild = false;
            current = current.rightChild;
        }
        if (current == null) { // Конец цепочки
            return false; // Узел не найден
        }
    }
    // Удаляемый узел найден
    // Продолжение...
}

Когда узел будет найден, мы сначала убеждаемся в том, что у него нет потомков.
Если условие выполнено, проверяется особый случай корневого узла.
Если удаляемый узел является корневым, мы просто присваиваем ему null, что приводит к полной очистке дерева.
В противном случае полю leftChild или rightChild родителя присваивается null,
чтобы отсоединить узел от родителя.

// Продолжение delete()...
// Если узел не имеет потомков, он просто удаляется.
if (current.leftChild == null && current.rightChild == null) {
    if (current == root) // Если узел является корневым,
        root = null; // дерево очищается
    else if (isLeftChild)
        parent.leftChild = null; // Узел отсоединяется
    else // от родителя
        parent.rightChild = null;
}
// Продолжение...