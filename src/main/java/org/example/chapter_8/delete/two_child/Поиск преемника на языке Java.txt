Ниже приведен фрагмент кода метода getSuccessor(), который возвращает преемника узла, переданного
в аргументе delNode. (Метод подразумевает, что у delNode существует правый потомок, но это условие
заведомо выполняется — предыдущая проверка определила, что удаляемый узел имеет двух потомков.)

// Метод возвращает узел со следующим значением после delNode.
// Для этого он сначала переходит к правому потомку, а затем отслеживает цепочку левых потомков этого узла.

private node getSuccessor(node delNode) {
    Node successorParent = delNode; // Родитель преемника
    Node successor = delNode; // Преемник
    Node current = delNode.rightChild; // Начинаем с правого потомка у удаляемого узла

    while (current != null) { // Пока остаются левые потомки

        successorParent = successor;
        successor = current;
        current = current.leftChild; // Переход к левому потомку
    }

    // Если преемник не является правым потомком -> создать связи между узлами
    if (successor != delNode.rightChild) {
        successorParent.leftChild = successor.rightChild;
        successor.rightChild = delNode.rightChild;
    }
    return successor;
}

Метод сначала переходит к правому потомку delNode, а затем в цикле while проходит по цепочке левых потомков
этого правого потомка.
При выходе из цикла while переменная successor содержит преемника delNode.
При обнаружении преемника также может возникнуть необходимость в обращении к его родителю,
поэтому в цикле while также отслеживается родитель текущего узла.

Метод getSuccessor() также выполняет две дополнительные операции, помимо поиска преемника.
